<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
mapper接口代理实现编写规则:
    1,映射文件中的namespace要等于接口的全路径名称
    2,映射文件中sql语句要等同于接口的方法名称
    3,映射文件中传入参数类型要等于接口方法的传入参数类型
    4,映射文件中返回结果集类型要等于接口方法的返回值类型
-->
<mapper namespace="cn.itheima.mapper.UserMapper">

    <!--
        封装sql条件,封装后可以重用
        id:是这个sql条件的唯一标识
    -->
    <sql id="user_Where">
        /*
        where的作用:
        自动向sql语句添加where关键字
        会去掉第一个条件的关键字
        */
        <where>
            <if test="username != null and username != ''">
                and username like '%${username}%'
            </if>
            <if test="sex != null and sex != ''">
                and sex=#{sex}
            </if>
        </where>
    </sql>


    <!--
    id:sql语句唯一标识
    parameterType:指定传入参数类型
    resultType:返回结果集类型
    #{}占位符:起到占位作用,如果传入的基本类型(String,long,double,boolean,float等),那么#{}中的变量名称可以随意写
    -->
    <select id="findUserById" parameterType="int" resultType="user">
        select * from user where id = #{id}
    </select>


    <!--
        如果返回结果为集合,可以调用selectList方法,这个方法返回的结果就是一个集合,所以映射文件中应该配置为集合泛型的类型
        ${}拼接符:字符串原样拼接,如果传入的参数是类型如果传入的基本类型(String,long,double,boolean,float等),那么${}中的变量必须为value
        注意:拼接符有sql注入的风险,所以慎重使用
    -->
    <select id="findUserByUserName" parameterType="string" resultType="cn.itheima.pojo.User">
        select * from user where username like '%${value}%'
    </select>


    <!--
        #{}:如果传入的是pojo类型,那么#{}中的变量名称必须是pojo中对应的属性.属性,属性....
        如果要返回数据库自增主键:可以使用select LAST_INSERT_ID()
    -->
    <insert id="insertUser" parameterType="cn.itheima.pojo.User">
        /*
        执行select LAST_INSERT_ID()数据函数,返回自增的主键
        keyProperty:将返回的主键放入传入参数的id中保存
        order:当前函数相对于insert语句的执行顺序,在insert之前执行是before,在insert后执行是after
        resultType:id的类型,也是keyProperty中属性的类型
        */
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            select LAST_INSERT_ID()
        </selectKey>
        insert into user (username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address})
    </insert>


    <select id="findUserbyVo" parameterType="cn.itheima.pojo.QueryVo" resultType="user">
        select * from user where username like '%${user.username}%' and sex = #{user.sex}
    </select>

    <!--只有返回结果为一行一列的时候,那么返回值类型才可以指定基本类型-->
    <select id="findUserCount" resultType="int">
        select count(*) from user
    </select>

    <select id="findUserByUserNameAndSex" parameterType="cn.itheima.pojo.User" resultType="user">
        select * from user
        /*调用sql条件*/
        <include refid="user_Where"/>
    </select>

    <select id="findUserByIds" parameterType="cn.itheima.pojo.QueryVo" resultType="user">
        SELECT * FROM USER
        <where>
            <if test="ids != null">
                <foreach collection="ids" item="id" open="id IN  (" close=")" separator=",">
                    /*
                    foreach:循环传入的集合参数
                    collection:传入的集合的变量名称
                    item:每次循环出的数据放入这个变量中
                    open:循环开始拼接的字符串
                    close:循环结束拼接的字符串
                    separator:循环中拼接的分隔符
                    */
                    #{id}
                </foreach>
            </if>
        </where>
    </select>


    <!--一对一:自动映射-->
    <select id="findOrdersAndUser1" resultType="cn.itheima.pojo.CustomOrders">
        select a.*,b.id uid,b.username,
        b.birthday,b.sex,b.address
        from orders a ,user b where a.user_id = b.id
    </select>

    <!--一对多:手动映射-->
    <!--
        id:resultMap唯一标识
        type:将查询出的数据放入这个指定的对象中
        注意:手动映射需要指定数据库中表的字段名与java中的pojo类的属性名称的对应关系
    -->
    <resultMap id="orderAndUserResultMap" type="cn.itheima.pojo.Orders">
        <!--
            id:标签指定主键字段对应关系
            column:列,数据库中的字段名
            property:属性,java中的pojo中的属性名称
        -->
        <id column="id" property="id"/>
        <!--result:标签指定非主键字段的对应关系-->
        <result column="user_id" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>


        <!--
            这个标签指定单个对象的关系
            property:指定将数量放入Orders中的属性中
            javaType:user属性的类型
        -->
        <association property="user" javaType="cn.itheima.pojo.User">
            <id column="uid" property="id"/>
            <result column="username" property="username"/>
            <result column="birthday" property="birthday"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>
        </association>
    </resultMap>
    <select id="findOrdersAndUsers2" resultMap="orderAndUserResultMap">
        select a.*,b.id uid,username,birthday,sex,address
        from orders a,user b
        where a.user_id = b.id
    </select>


    <resultMap type="cn.itheima.pojo.User" id="findUserAndOrders">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="birthday" property="birthday"/>
        <result column="sex" property="sex"/>
        <result column="address" property="address"/>

        <!--
            指定对应的集合对象关系映射
            property:将数据放入User对象中的orderList属性中
            ofType:指定orderList属性的泛型类型
        -->
        <collection property="orderList" ofType="cn.itheima.pojo.Orders">
            <id column="oid" property="id"/>
            <result column="user_id" property="userId"/>
            <result column="number" property="number"/>
            <result column="createtime" property="createtime"/>
        </collection>
    </resultMap>
    <select id="findUserAndOrders" resultMap="findUserAndOrders">
        select a.*,b.id oid,user_id,number,createtime from user a ,
        orders b where a.id = b.user_id
    </select>

</mapper>